using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Md_Graf
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void Guzior_Click(object sender, EventArgs e)
        {
            var w1 = new node(5);
            var w2 = new node(3);
            var w3 = new node(1);
            var w4 = new node(2);
            var w5 = new node(6);
            var w6 = new node(4);

            w1.dzieci.Add(w2);
            w1.dzieci.Add(w3);
            w1.dzieci.Add(w4);
            w2.dzieci.Add(w5);
            w2.dzieci.Add(w6);

            A(w1);
        }

        private void Guzior2_Click(object sender, EventArgs e)
        {
            var w1 = new node2(0);
            var w2 = new node2(5);
            var w3 = new node2(1);
            var w4 = new node2(3);
            var w5 = new node2(2);
            var w6 = new node2(4);

            w1.Add(w3);
            w3.Add(w2);
            w3.Add(w5);
            w3.Add(w6);
            w2.Add(w6);
            w5.Add(w4);

            B(w1);
        }

        void A(node Krzyś)
        {
            MessageBox.Show(Krzyś.wartosc.ToString());
            for (int i = 0; i < Krzyś.dzieci.Count; i++)
            {
                A(Krzyś.dzieci[i]);
            }
        }

        List<node2> visited = new List<node2>();
        void B(node2 Krzyś)
        {
            visited.Add(Krzyś);
            MessageBox.Show(Krzyś.ToString());
            foreach (var somsiad in Krzyś.somsiad)
            {
                if (!visited.Contains(somsiad))
                {
                    B(somsiad);
                }
            }
        }

        private void Guzior3_Click(object sender, EventArgs e)
        {
            var d = new DrzewoBinarne(5);
            d.Add(4);
            d.Add(4);
            d.Add(8);
            d.Add(7);
            d.Add(9);
            d.Add(6);
            //DO DOMU{FUNKACJA ZNAJDZ Node3 Znajdż(int liczba)
            //                        Node3 ZnajdzMin(Node3 w)
            //                        Node3 ZnajdzMax(Node3 w)
            //                        Node3 Następny(Node3 w)
            //                        a)jest prawe dziecko (zwroc  znajdz min na prawym dziecku)
            //                        b)nie ma dziecka prawego(idz do gory tak dlugo az wyjdziesz jako lewe dziecko wtedy rodzic jest nastepnikiem)
            //                        c)gdy idac do gory zawsze wychodze jako prawe dziecko az nie ma kolejnego rodzica wtedy brak nastepnika}
        }
        //string napis = "";
        //napis += w.ToString();
        //...........click...napis=""; visited.Clear(); A(w1); MB.S(napis);
        // Do domu Bfs(znajdz na wiki bfs gif ktory pokazuje pokazywanie go i zaprogramusj)
        // node3 Drzewo binarne (rodzic / lewe dziecko/ prawe dziecko)
    }

    class node
    {
        public int wartosc;
        public List<node> dzieci = new List<node>();
        public node(int liczba)
        {
            this.wartosc = liczba;
        }
    }

    class node2
    {
        public int wartosc;
        public List<node2> somsiad = new List<node2>();
        public node2(int liczba)
        {
            this.wartosc = liczba;
        }

        public void Add(node2 s)
        {
            if (!this.somsiad.Contains(s))
            {
                this.somsiad.Add(s);
            }
            if (!s.somsiad.Contains(this))
            {
                s.somsiad.Add(this);
            }
        }

        public override string ToString()
        {
            return this.wartosc.ToString();
        }
    }

    class Node3
    {
        public int wartosc;
        public Node3 rodzic;
        public Node3 lewe;
        public Node3 prawe;
        public Node3(int liczba)
        {
            this.wartosc = liczba;
        }

        internal void Add(int wartosc)
        {
            var dziecko = new Node3(wartosc);
            dziecko.rodzic = this;
            if (wartosc < this.wartosc)
            {
                this.lewe = dziecko;
            }
            else
            {
                this.prawe = dziecko;
            }
        }
        public override string ToString()
        {
            return this.wartosc.ToString();
        }

        public int getliczbadzieci()
        {
            int wynik = 0;
            if (this.lewe != null)
                wynik++;

            if (this.prawe != null)
                wynik++;

            return wynik;
        }
    }

    class DrzewoBinarne
    {
        public Node3 korzeń;
        public int liczbaWęzłów;

        public DrzewoBinarne(int liczba)
        {
            this.korzeń = new Node3(liczba);
            this.liczbaWęzłów = 1;
        }

        public void Add(int wartosc)
        {
            Node3 rodzic = this.ZnajdzRodzica(wartosc);
            rodzic.Add(wartosc);
        }

        private Node3 ZnajdzRodzica(int wartosc)
        {
            var w = this.korzeń;
            while (true)
            {
                if (wartosc < w.wartosc)
                {
                    if (w.lewe == null)
                    {
                        return w;
                    }
                    else
                    {
                        w = w.lewe;
                    }
                }
                else
                {
                    if (w.prawe == null)
                    {
                        return w;
                    }
                    else
                    {
                        w = w.prawe;
                    }
                }
            }
        }

        private Node3 ZnajdzTemporary(int wartosc)
        {
            var w = this.korzeń;

            while (true)
            {
                if (wartosc == w.wartosc)
                {
                    return w;
                }

                if (wartosc < w.wartosc)
                {
                    if (w.lewe == null)
                    {
                        return null;
                    }
                    else
                    {
                        w = w.lewe;
                    }
                }
                else
                {
                    if (w.prawe == null)
                    {
                        return null;
                    }
                    else
                    {
                        w = w.prawe;
                    }
                }
            }
        }

        public Node3 Znajdz(int liczba)
        {
            var w = this.korzeń;

            if (w.wartosc == liczba)
            {
                return w;
            }
            else if (liczba < w.wartosc)
            {
                while (true)
                {
                    if (w.lewe == null)
                    {
                        MessageBox.Show("Nie ma tej liczby w drzewie binarnym");
                        return null;
                    }
                    else
                    {
                        if (w.lewe.wartosc == liczba)
                        {
                            return w.lewe;
                        }
                        else
                        {
                            w = w.lewe;
                        }
                    }

                }
            }
            else
            {
                while (true)
                {
                    if (w.prawe == null)
                    {
                        MessageBox.Show("Nie ma tej liczby w drzewie binarnym");
                        return null;
                    }
                    else
                    {
                        if (w.prawe.wartosc == liczba)
                        {
                            return w.prawe;
                        }
                        else
                        {
                            w = w.prawe;
                        }
                    }
                }
            }

        }
        public Node3 ZnajdzMinTemporary(Node3 w)
        {
            while (w.lewe != null)
            {
                w = w.lewe;
            }

            return w;
        }

        public Node3 ZnajdzMaxTemporary(Node3 w)
        {
            while (w.prawe != null)
            {
                w = w.prawe;
            }

            return w;
        }

        public Node3 ZnajdzMin(Node3 w)
        {
            while (true)
            {
                if (w.lewe == null)
                {
                    return w;
                }
                else
                {
                    w = w.lewe;
                }
            }
        }


        public Node3 ZnajdzMax(Node3 w)
        {
            while (true)
            {
                if (w.prawe == null)
                {
                    return w;
                }
                else
                {
                    w = w.prawe;
                }
            }
        }

        public Node3 NastepnikTemporary(Node3 w)
        {
            if (w.prawe != null)
            {
                return this.ZnajdzMinTemporary(w.prawe);
            }

            while (w.rodzic != null)
            {
                if (w.rodzic.lewe == w)
                {
                    return w.rodzic;
                }
                else
                {
                    w = w.rodzic;
                }
            }

            return null;
        }
        public Node3 Nastepnik(Node3 w)
        {

            if (w.prawe != null)
            {
                return ZnajdzMin(w.prawe);
            }

            while (true)
            {

                if (w.prawe == null && w.rodzic != null)
                {
                    if (w.rodzic != null && w == w.rodzic.lewe)
                    {
                        return w.rodzic;
                    }
                    else if (w.rodzic != null)
                    {
                        w = w.rodzic;
                    }

                }
                else
                {
                    MessageBox.Show("Nie ma następnika");
                    return null;
                }
            }
        }

        //DO DOMU public Node3 Usun(Node3 w)
        //1) Gdy nie ma dzieci, odwiazujemy
        //2) Gdy jest 1 dziecko to wchodzi na miejsce rodzica
        //3) Gdy jest 2 dzieci, przesun rodzicow


        Node3 usun(Node3 w)
        {
            switch (w.getliczbadzieci())
            {
                case 0:
                    w = this.usungdy0dzieci(w);
                    break;

                case 1:
                    w = this.usungdy1dziecko(w);
                    break;

                case 2:
                    w = this.usungdy2dzieci(w);
                    break;
            }
            return w;
        }

        Node3 usungdy0dzieci(Node3 w)
        {
            if (w.rodzic == null)
            {
                this.korzeń = null;
                return w;
            }

            if (w.rodzic.lewe == w)
            {
                w.rodzic.lewe = null;
            }
            else
            {
                w.rodzic.prawe = null;
            }

            w.rodzic = null;
            return w;
        }

        Node3 usungdy1dziecko(Node3 w)
        {
            Node3 dziecko = null;
            if(w.lewe != null)
            {
                dziecko = w.lewe;
                w.lewe = null;
            }
            else
            {
                dziecko = w.prawe;
                w.prawe = null;
            }

            dziecko.rodzic = w.rodzic;

            if(w.rodzic == null)
            {
                this.korzeń = null;
                return w;
            }

            if(w.rodzic.lewe ==w)
            {
                w.rodzic.lewe = dziecko;
                w.rodzic = null;
            }
            else
            {
                w.rodzic.prawe = dziecko;
                w.rodzic = null;
            }

            return w;
        }

        Node3 usungdy2dzieci(Node3 w)
        {
            var zamiennik = this.NastepnikTemporary(w);
            if(zamiennik.getliczbadzieci()==0)
            {
                zamiennik = this.usungdy0dzieci(zamiennik);
            }
            else
            {
                zamiennik = this.usungdy1dziecko(zamiennik);
            }

            if(w.rodzic != null)
            {
                if(w.rodzic == w)
                {
                    w.rodzic.lewe = zamiennik;
                }
                else
                {
                    w.rodzic.prawe = zamiennik;
                }
            }

            zamiennik.rodzic = w.rodzic;
            w.rodzic = null;
            return w;
        }
    }
    /*   class Node4
       {
           int wartosc;
           List<Edges> krawezie;
       }
       
    */

    class Edge
    {
        int waga;
        Node4 poczatek;
        Node4 koniec;
    }

    class Graf
    {
        List<Node4> wezly = new List<Node4>();
        List<Edge> krawedzie = new List<Edge>();

        public Dictionary<Node4, Element> Dijkstry(Node4 start)
        {
            var tabelka = this.DijkstryStartowaTabelka(start);






        }

        public Dictionary<Node4, Element> DijkstryStartowaTabelka(Node4 start)
        {
            /*var wynik = tabelka.where(item => item.value.czyZrobiony).sortby.(Item => Item.value.dystans);*/



        }


        int droga(List<Node3> wezly, List<Edge> krawedzie)
        {
            int cos = 1;
            return cos;
        }
    }

    class Node4
    {
        public int wartosc;

        public Node4(int wartosc)
        {
            this.wartosc = wartosc;
        }
    }

    class Element
    {
        public int dystans;
        public Node4 poprzednik;
        public bool czyZrobiony;
    }


}
